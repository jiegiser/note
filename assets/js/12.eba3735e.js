(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{389:function(t,s,a){t.exports=a.p+"assets/img/guanjianzi.82f71a3e.png"},390:function(t,s,a){t.exports=a.p+"assets/img/baoliuzi.8a466bad.png"},391:function(t,s,a){t.exports=a.p+"assets/img/leixingzhuanhuan.8d4249ef.png"},392:function(t,s,a){t.exports=a.p+"assets/img/yunsuanfu.b7ad0d3a.png"},393:function(t,s,a){t.exports=a.p+"assets/img/shilianghejuzhen.c99b244d.png"},394:function(t,s,a){t.exports=a.p+"assets/img/juzhengouzaolizi.4c1368e8.png"},586:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"glsl-es-概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#glsl-es-概述"}},[t._v("#")]),t._v(" GLSL ES 概述")]),t._v(" "),n("p",[t._v("GLSL ES 变成语言是在 OpenGL 着色器语言（GLSL）的基础上，删除和简化一部分功能后形成的。GLSL ES 的目标平台是消费电子产品或嵌入式设备；因此简化 GLSL ES 能够允许硬件厂商对这些设备的硬件进行简化，由此带来的好处是降低了硬件的功耗，以及更重要的，减少了性能开销。")]),t._v(" "),n("h2",{attrs:{id:"基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),n("p",[t._v("编写规范：")]),t._v(" "),n("ul",[n("li",[t._v("程序是大小写敏感的；")]),t._v(" "),n("li",[t._v("每一个语句都应该以一个英文分号结束；")])]),t._v(" "),n("h3",{attrs:{id:"执行次序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行次序"}},[t._v("#")]),t._v(" 执行次序")]),t._v(" "),n("p",[t._v("从 main() 函数开始执行，着色器程序必须有且仅有一个 main() 函数，而且该函数不能接收任何参数。main() 函数前面的 void 关键字表示这个函数不返回任何值。")]),t._v(" "),n("h3",{attrs:{id:"注释"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),n("p",[t._v("在着色器程序中，可以添加注释，而且注释的格式和 JavaScript 中的注释格式是相同的：")]),t._v(" "),n("ul",[n("li",[t._v("单行注释：// 后直到换行处的所有字符为注释")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("int kep // 注释\n")])])]),n("ul",[n("li",[t._v("多行注释：/* 和 */ 之间的所有字符为注释")])]),t._v(" "),n("h2",{attrs:{id:"数据值类型（数值和布尔值）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据值类型（数值和布尔值）"}},[t._v("#")]),t._v(" 数据值类型（数值和布尔值）")]),t._v(" "),n("p",[t._v("GLSL 支持两种数据值类型")]),t._v(" "),n("ul",[n("li",[t._v("数值类型：GLSL ES 支持整型数和浮点数，没有小数点的值被认为是整型数，而有小数点的值被称为浮点数。")]),t._v(" "),n("li",[t._v("布尔值类型：包含 true 和 false")])]),t._v(" "),n("h2",{attrs:{id:"变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),n("p",[t._v("组合规则：")]),t._v(" "),n("ul",[n("li",[t._v("只包括 a-z、A-Z，0-9 和下划线。")]),t._v(" "),n("li",[t._v("变量名的首字母不能是数字。")]),t._v(" "),n("li",[t._v("不能以 gl_、webgl_ 或 "),n("em",[t._v("webgl")]),t._v(" 开头，这些前缀是 OpenGL ES 保留字")]),t._v(" "),n("li",[t._v("不能是下表所列出的关键字，也不能是那些保留字。但是，你的变量名的一部分可以是他们。")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(389),alt:"avatar"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(390),alt:"avatar"}})]),t._v(" "),n("h2",{attrs:{id:"glsl-es-是强类型语言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#glsl-es-是强类型语言"}},[t._v("#")]),t._v(" GLSL ES 是强类型语言")]),t._v(" "),n("p",[t._v("GLSL ES 不像 JavaScript，他必须具体地指明变量的数据类型。")]),t._v(" "),n("h2",{attrs:{id:"基本类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[t._v("#")]),t._v(" 基本类型")]),t._v(" "),n("p",[t._v("GLSL ES 支持的基本类型如下：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类型")]),t._v(" "),n("th",{staticStyle:{"text-align":"right"}},[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("float")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("单精度浮点数类型，该类型的变量表示一个单精度浮点数")])]),t._v(" "),n("tr",[n("td",[t._v("int")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("整型数，该类型的变量表示一个整数")])]),t._v(" "),n("tr",[n("td",[t._v("bool")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("布尔值，该类型的变量表示一个布尔值")])])])]),t._v(" "),n("p",[t._v("下面代码是声明基本类型的变量例子：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("float klimt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 变量为一个浮点数\nint utrillo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 变量为一个整型数\nbool doga"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 变量为一个布尔值\n")])])]),n("h3",{attrs:{id:"赋值和类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#赋值和类型转换"}},[t._v("#")]),t._v(" 赋值和类型转换")]),t._v(" "),n("p",[t._v("使用等号可以进行赋值，两侧类型需要一致：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("int i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfloat "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("f1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 错误\nfloat f2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 没问题\n")])])]),n("p",[t._v("要将一个整型数值赋值给浮点型变量，需要将整型数转换为浮点数，这个过程称为类型转换，比如，可以使用内置的函数 float() 来将整型数转换为浮点数：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("int i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfloat "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("f1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" float"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 将 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" 转换为 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.0")]),t._v(" 并赋值给 f1\n")])])]),n("p",[t._v("GLSL ES 支持下面几种类型转换的内置函数：\n"),n("img",{attrs:{src:a(391),alt:"avatar"}})]),t._v(" "),n("h3",{attrs:{id:"运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),n("p",[n("img",{attrs:{src:a(392),alt:"avatar"}})]),t._v(" "),n("h2",{attrs:{id:"矢量和矩阵"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#矢量和矩阵"}},[t._v("#")]),t._v(" 矢量和矩阵")]),t._v(" "),n("p",[t._v("GLSL ES 支持矢量和矩阵类型，这两种数据类型很适合用来处理计算机图形。矢量和矩阵类型的变量都包含多个元素,每个元素是一个数值(整型数、浮点数或布尔值)。矢量将这些元素排成一列，可以用来表示顶点坐标或颜色值等，而矩阵则将元素划分成行和列，可以用来表示变换矩阵。图给出了矢量和矩阵的例子。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(393),alt:"avatar"}})]),t._v(" "),n("p",[t._v("GLSL ES 支持多种不同的矢量和矩阵类型，")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类别")]),t._v(" "),n("th",{staticStyle:{"text-align":"right"}},[t._v("GLSL ES 数据类型")]),t._v(" "),n("th",{staticStyle:{"text-align":"right"}},[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("矢量")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("vec2、vec3、vec4"),n("br"),t._v("ivec2、ivec3、ivec4"),n("br"),t._v("bvec2、bvec3、bvec4")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("具有 2、3、4 个浮点数元素的矢量 "),n("br"),t._v("具有 2、3、4 个整行数元素的矢量 "),n("br"),t._v("具有 2、3、4 个布尔值元素的矢量")])]),t._v(" "),n("tr",[n("td",[t._v("矩阵")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("mat2、mat3、mat4")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("2 × 2、3 × 3、4 × 4 的浮点数元素的矩阵（分别具有4、9、16 个元素）")])])])]),t._v(" "),n("h3",{attrs:{id:"赋值和构造"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#赋值和构造"}},[t._v("#")]),t._v(" 赋值和构造")]),t._v(" "),n("p",[t._v("同样适用等号来对矢量和矩阵进行赋值操作。通常我们使用与数据类型同名的内置构造函数来生成变量，对于 vec4 类型来说，就可以使用内置的 vec4() 函数。如下：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec4 position "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"矢量构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#矢量构造函数"}},[t._v("#")]),t._v(" 矢量构造函数")]),t._v(" "),n("p",[t._v("在 GLSL ES 中，矢量非常重要，所以 GLSL ES 提供了丰富灵活的方式来创建矢量如：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec3 v3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 将 v3 设为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nvec2 v2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 使用 v3 的前两个元素，将 v2 设为 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nvec4 v4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 将 v4 设为 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("如果构造函数接收了不止一个参数，但是参数的个数又比矢量的元素个数少，就会出错：")])]),t._v(" "),n("p",[t._v("也可以将多个矢量组合成一个矢量：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec4 v4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v2, v4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 将 v4 设为 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("上面的填充规则是，先把第一个参数 v2 的所有元素填充进去，如果还未填满，就继续用第 2 个参数 v4 中的元素填充。")]),t._v(" "),n("h3",{attrs:{id:"矩阵构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#矩阵构造函数"}},[t._v("#")]),t._v(" 矩阵构造函数")]),t._v(" "),n("p",[t._v("矩阵构造函数的使用方式与矢量构造函数的使用方式类似。但是，要保证存储在矩阵中的元素是按照列主序排列的，如下结果例子：")]),t._v(" "),n("ul",[n("li",[t._v("向矩阵构造函数中传入矩阵的每一个元素的数值类构造矩阵，注意传入值的顺序必须是列主序的。")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec4 m4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mat4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),t._v(",\n               "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.0")]),t._v(",\n               "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.0")]),t._v(",\n               "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("13.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("14.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("15.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(394),alt:"avatar"}})]),t._v(" "),n("ul",[n("li",[t._v("向矩阵构造函数中传入一个或多个矢量，按照列主序使用矢量里的元素值来构造矩阵。")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("// 使用两个 vec2 对象来创建 mat2 对象\nvec2 v2_1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec2 v2_2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmat2 m2_1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mat2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v2_1, v2_2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v("\n                             // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),t._v("\n// 使用一个 vec4 对象来创建 mat2 对象\nvec4 v4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmat2 m2_2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mat2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v("\n                     // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),t._v("\n")])])]),n("ul",[n("li",[t._v("向矩阵构造函数中传入矢量和数值，按照列主序使用矢量里的元素和直接传入的数值类构造矩阵。")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("mat2 m2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mat2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", v2_2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v("\n                                // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),t._v("\n")])])]),n("ul",[n("li",[t._v("向矩阵构造函数中传入单个数值，这样将生成一个对角线上元素都是该数值，其他元素为 0.0 的矩阵。")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("mat4 m4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mat4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v("\n                    // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v("\n                    // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v("\n                    // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("如果传入的数值数量大于 1，又没有达到矩阵元素的数量，就会出错。")])]),t._v(" "),n("h3",{attrs:{id:"访问元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#访问元素"}},[t._v("#")]),t._v(" 访问元素")]),t._v(" "),n("p",[t._v("访问矢量或矩阵中的元素，可以使用 . 或者 [] 运算符。")]),t._v(" "),n("h3",{attrs:{id:"运算符-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算符-2"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),n("p",[t._v("在矢量变量名后接点运算符，然后接上分量名，就可以访问矢量的元素了。矢量的分量名如下：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类别")]),t._v(" "),n("th",{staticStyle:{"text-align":"right"}},[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("x,y,z,w")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("用来获取顶点坐标分量")])]),t._v(" "),n("tr",[n("td",[t._v("r,g,b,a")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("用来获取颜色分量")])]),t._v(" "),n("tr",[n("td",[t._v("s,t,p,g")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("用来获取纹理坐标分量")])])])]),t._v(" "),n("p",[t._v("由于矢量可以用来存储顶点的坐标、颜色和纹理坐标，所以 GLSL ES 支持以上三种分量名称以增强程序的可读性。事实上，任何矢量的 x、r 或 s 分量都会返回第1个分量 y、g、t 分量都返回第2个分量，等等。如果你愿意，你可以随意地交换使用它们。比如:")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec3 v3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1,0")]),t._v(",2.0,3.0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 将V3设为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1,0")]),t._v(",2.0,3.0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfloat f:\n\nf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3,x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 f 为1,0\nf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 f 为2,0\nf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.z"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 f 为3.0\n\nf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.r // 设 f 为1,0\nf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 f 为1.0\n")])])]),n("p",[t._v("如你所见,在这些例子中 x、r 和 s 虽然名称不同，但访问的却都是第1个分量。如果试图访问超过矢量长度的分量，就会出错:")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("f "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // v3 变量中不存在的第4个元素，w 无法访问\n")])])]),n("p",[t._v("将(同一个集合的)多个分量名共同置于点运算符后，就可以从矢量中同时抽取出多个分量。这个过程称作混合( swizzling)。在下面这个例子中，我们使用了 x、y、z 和 w，其他的集合也有相同的效果：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec2 v2\nv2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.xy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 v2 为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1,0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nv2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" V3.yz"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 v2 为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3,0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 可以省略任意分量\nv2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.xz"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 v2 为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 可以跳过任意分量\nv2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.yx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 v2 为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 可以逆序\nv2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.xx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 v2 为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 可以重复任意分量\n\nvec3 v3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv3a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.zyx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 v3a 为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 可以使用所有分量\n")])])]),n("p",[t._v("聚合分量名也可以用来作为赋值表达式 (=) 的左值:")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" position "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nposition.xw "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // position "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("记住，此时的多个分量名必须属于同一个集合，比如说，你不能使用 v3.was")])])])}),[],!1,null,null,null);s.default=e.exports}}]);