(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{563:function(t,s,a){t.exports=a.p+"assets/img/guanjianzi.82f71a3e.png"},564:function(t,s,a){t.exports=a.p+"assets/img/baoliuzi.8a466bad.png"},565:function(t,s,a){t.exports=a.p+"assets/img/leixingzhuanhuan.8d4249ef.png"},566:function(t,s,a){t.exports=a.p+"assets/img/yunsuanfu.b7ad0d3a.png"},567:function(t,s,a){t.exports=a.p+"assets/img/shilianghejuzhen.c99b244d.png"},568:function(t,s,a){t.exports=a.p+"assets/img/juzhengouzaolizi.4c1368e8.png"},569:function(t,s,a){t.exports=a.p+"assets/img/yunsuanfusljz.5f19c0ea.png"},570:function(t,s,a){t.exports=a.p+"assets/img/wenlichaxunhanshu.0640fa58.png"},571:function(t,s,a){t.exports=a.p+"assets/img/youxianjiyunsuan.9a688151.png"},572:function(t,s,a){t.exports=a.p+"assets/img/canshuxiandingci.82b9f742.png"},573:function(t,s,a){t.exports=a.p+"assets/img/neizhihanshu.fcefe4cc.png"},574:function(t,s,a){t.exports=a.p+"assets/img/cunchuxiandingziavu.84b35552.png"},575:function(t,s,a){t.exports=a.p+"assets/img/shengmingbianliang.40fa1246.png"},576:function(t,s,a){t.exports=a.p+"assets/img/jingduxiandingzi.745060a9.png"},577:function(t,s,a){t.exports=a.p+"assets/img/leixmorenjingdu.c145e89e.png"},739:function(t,s,a){"use strict";a.r(s);var n=a(26),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"glsl-es-概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#glsl-es-概述"}},[t._v("#")]),t._v(" GLSL ES 概述")]),t._v(" "),n("p",[t._v("GLSL ES 变成语言是在 OpenGL 着色器语言（GLSL）的基础上，删除和简化一部分功能后形成的。GLSL ES 的目标平台是消费电子产品或嵌入式设备；因此简化 GLSL ES 能够允许硬件厂商对这些设备的硬件进行简化，由此带来的好处是降低了硬件的功耗，以及更重要的，减少了性能开销。")]),t._v(" "),n("h2",{attrs:{id:"基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),n("p",[t._v("编写规范：")]),t._v(" "),n("ul",[n("li",[t._v("程序是大小写敏感的；")]),t._v(" "),n("li",[t._v("每一个语句都应该以一个英文分号结束；")])]),t._v(" "),n("h3",{attrs:{id:"执行次序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行次序"}},[t._v("#")]),t._v(" 执行次序")]),t._v(" "),n("p",[t._v("从 main() 函数开始执行，着色器程序必须有且仅有一个 main() 函数，而且该函数不能接收任何参数。main() 函数前面的 void 关键字表示这个函数不返回任何值。")]),t._v(" "),n("h3",{attrs:{id:"注释"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),n("p",[t._v("在着色器程序中，可以添加注释，而且注释的格式和 JavaScript 中的注释格式是相同的：")]),t._v(" "),n("ul",[n("li",[t._v("单行注释：// 后直到换行处的所有字符为注释")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("int kep // 注释\n")])])]),n("ul",[n("li",[t._v("多行注释：/* 和 */ 之间的所有字符为注释")])]),t._v(" "),n("h2",{attrs:{id:"数据值类型-数值和布尔值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据值类型-数值和布尔值"}},[t._v("#")]),t._v(" 数据值类型（数值和布尔值）")]),t._v(" "),n("p",[t._v("GLSL 支持两种数据值类型")]),t._v(" "),n("ul",[n("li",[t._v("数值类型：GLSL ES 支持整型数和浮点数，没有小数点的值被认为是整型数，而有小数点的值被称为浮点数。")]),t._v(" "),n("li",[t._v("布尔值类型：包含 true 和 false")])]),t._v(" "),n("h2",{attrs:{id:"变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),n("p",[t._v("组合规则：")]),t._v(" "),n("ul",[n("li",[t._v("只包括 a-z、A-Z，0-9 和下划线。")]),t._v(" "),n("li",[t._v("变量名的首字母不能是数字。")]),t._v(" "),n("li",[t._v("不能以 gl_、webgl_ 或 "),n("em",[t._v("webgl")]),t._v(" 开头，这些前缀是 OpenGL ES 保留字")]),t._v(" "),n("li",[t._v("不能是下表所列出的关键字，也不能是那些保留字。但是，你的变量名的一部分可以是他们。")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(563),alt:"avatar"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(564),alt:"avatar"}})]),t._v(" "),n("h2",{attrs:{id:"glsl-es-是强类型语言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#glsl-es-是强类型语言"}},[t._v("#")]),t._v(" GLSL ES 是强类型语言")]),t._v(" "),n("p",[t._v("GLSL ES 不像 JavaScript，他必须具体地指明变量的数据类型。")]),t._v(" "),n("h2",{attrs:{id:"基本类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[t._v("#")]),t._v(" 基本类型")]),t._v(" "),n("p",[t._v("GLSL ES 支持的基本类型如下：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类型")]),t._v(" "),n("th",{staticStyle:{"text-align":"right"}},[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("float")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("单精度浮点数类型，该类型的变量表示一个单精度浮点数")])]),t._v(" "),n("tr",[n("td",[t._v("int")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("整型数，该类型的变量表示一个整数")])]),t._v(" "),n("tr",[n("td",[t._v("bool")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("布尔值，该类型的变量表示一个布尔值")])])])]),t._v(" "),n("p",[t._v("下面代码是声明基本类型的变量例子：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("float klimt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 变量为一个浮点数\nint utrillo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 变量为一个整型数\nbool doga"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 变量为一个布尔值\n")])])]),n("h3",{attrs:{id:"赋值和类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#赋值和类型转换"}},[t._v("#")]),t._v(" 赋值和类型转换")]),t._v(" "),n("p",[t._v("使用等号可以进行赋值，两侧类型需要一致：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("int i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfloat "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("f1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 错误\nfloat f2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 没问题\n")])])]),n("p",[t._v("要将一个整型数值赋值给浮点型变量，需要将整型数转换为浮点数，这个过程称为类型转换，比如，可以使用内置的函数 float() 来将整型数转换为浮点数：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("int i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfloat "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("f1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" float"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 将 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" 转换为 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.0")]),t._v(" 并赋值给 f1\n")])])]),n("p",[t._v("GLSL ES 支持下面几种类型转换的内置函数：\n"),n("img",{attrs:{src:a(565),alt:"avatar"}})]),t._v(" "),n("h3",{attrs:{id:"运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),n("p",[n("img",{attrs:{src:a(566),alt:"avatar"}})]),t._v(" "),n("h2",{attrs:{id:"矢量和矩阵"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#矢量和矩阵"}},[t._v("#")]),t._v(" 矢量和矩阵")]),t._v(" "),n("p",[t._v("GLSL ES 支持矢量和矩阵类型，这两种数据类型很适合用来处理计算机图形。矢量和矩阵类型的变量都包含多个元素,每个元素是一个数值(整型数、浮点数或布尔值)。矢量将这些元素排成一列，可以用来表示顶点坐标或颜色值等，而矩阵则将元素划分成行和列，可以用来表示变换矩阵。图给出了矢量和矩阵的例子。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(567),alt:"avatar"}})]),t._v(" "),n("p",[t._v("GLSL ES 支持多种不同的矢量和矩阵类型，")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类别")]),t._v(" "),n("th",{staticStyle:{"text-align":"right"}},[t._v("GLSL ES 数据类型")]),t._v(" "),n("th",{staticStyle:{"text-align":"right"}},[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("矢量")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("vec2、vec3、vec4"),n("br"),t._v("ivec2、ivec3、ivec4"),n("br"),t._v("bvec2、bvec3、bvec4")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("具有 2、3、4 个浮点数元素的矢量 "),n("br"),t._v("具有 2、3、4 个整行数元素的矢量 "),n("br"),t._v("具有 2、3、4 个布尔值元素的矢量")])]),t._v(" "),n("tr",[n("td",[t._v("矩阵")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("mat2、mat3、mat4")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("2 × 2、3 × 3、4 × 4 的浮点数元素的矩阵（分别具有4、9、16 个元素）")])])])]),t._v(" "),n("h3",{attrs:{id:"赋值和构造"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#赋值和构造"}},[t._v("#")]),t._v(" 赋值和构造")]),t._v(" "),n("p",[t._v("同样适用等号来对矢量和矩阵进行赋值操作。通常我们使用与数据类型同名的内置构造函数来生成变量，对于 vec4 类型来说，就可以使用内置的 vec4() 函数。如下：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec4 position "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"矢量构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#矢量构造函数"}},[t._v("#")]),t._v(" 矢量构造函数")]),t._v(" "),n("p",[t._v("在 GLSL ES 中，矢量非常重要，所以 GLSL ES 提供了丰富灵活的方式来创建矢量如：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec3 v3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 将 v3 设为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nvec2 v2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 使用 v3 的前两个元素，将 v2 设为 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nvec4 v4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 将 v4 设为 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("如果构造函数接收了不止一个参数，但是参数的个数又比矢量的元素个数少，就会出错：")])]),t._v(" "),n("p",[t._v("也可以将多个矢量组合成一个矢量：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec4 v4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v2, v4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 将 v4 设为 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("上面的填充规则是，先把第一个参数 v2 的所有元素填充进去，如果还未填满，就继续用第 2 个参数 v4 中的元素填充。")]),t._v(" "),n("h3",{attrs:{id:"矩阵构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#矩阵构造函数"}},[t._v("#")]),t._v(" 矩阵构造函数")]),t._v(" "),n("p",[t._v("矩阵构造函数的使用方式与矢量构造函数的使用方式类似。但是，要保证存储在矩阵中的元素是按照列主序排列的，如下结果例子：")]),t._v(" "),n("ul",[n("li",[t._v("向矩阵构造函数中传入矩阵的每一个元素的数值类构造矩阵，注意传入值的顺序必须是列主序的。")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec4 m4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mat4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),t._v(",\n               "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.0")]),t._v(",\n               "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.0")]),t._v(",\n               "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("13.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("14.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("15.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(568),alt:"avatar"}})]),t._v(" "),n("ul",[n("li",[t._v("向矩阵构造函数中传入一个或多个矢量，按照列主序使用矢量里的元素值来构造矩阵。")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("// 使用两个 vec2 对象来创建 mat2 对象\nvec2 v2_1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec2 v2_2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmat2 m2_1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mat2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v2_1, v2_2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v("\n                             // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),t._v("\n// 使用一个 vec4 对象来创建 mat2 对象\nvec4 v4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmat2 m2_2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mat2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v("\n                     // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),t._v("\n")])])]),n("ul",[n("li",[t._v("向矩阵构造函数中传入矢量和数值，按照列主序使用矢量里的元素和直接传入的数值类构造矩阵。")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("mat2 m2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mat2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", v2_2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v("\n                                // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),t._v("\n")])])]),n("ul",[n("li",[t._v("向矩阵构造函数中传入单个数值，这样将生成一个对角线上元素都是该数值，其他元素为 0.0 的矩阵。")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("mat4 m4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mat4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v("\n                    // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v("\n                    // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v("\n                    // "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("如果传入的数值数量大于 1，又没有达到矩阵元素的数量，就会出错。")])]),t._v(" "),n("h3",{attrs:{id:"访问元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#访问元素"}},[t._v("#")]),t._v(" 访问元素")]),t._v(" "),n("p",[t._v("访问矢量或矩阵中的元素，可以使用 . 或者 [] 运算符。")]),t._v(" "),n("h3",{attrs:{id:"运算符-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算符-2"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),n("p",[t._v("在矢量变量名后接点运算符，然后接上分量名，就可以访问矢量的元素了。矢量的分量名如下：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类别")]),t._v(" "),n("th",{staticStyle:{"text-align":"right"}},[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("x,y,z,w")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("用来获取顶点坐标分量")])]),t._v(" "),n("tr",[n("td",[t._v("r,g,b,a")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("用来获取颜色分量")])]),t._v(" "),n("tr",[n("td",[t._v("s,t,p,g")]),t._v(" "),n("td",{staticStyle:{"text-align":"right"}},[t._v("用来获取纹理坐标分量")])])])]),t._v(" "),n("p",[t._v("由于矢量可以用来存储顶点的坐标、颜色和纹理坐标，所以 GLSL ES 支持以上三种分量名称以增强程序的可读性。事实上，任何矢量的 x、r 或 s 分量都会返回第1个分量 y、g、t 分量都返回第2个分量，等等。如果你愿意，你可以随意地交换使用它们。比如:")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec3 v3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1,0")]),t._v(",2.0,3.0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 将V3设为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1,0")]),t._v(",2.0,3.0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfloat f:\n\nf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3,x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 f 为1,0\nf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 f 为2,0\nf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.z"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 f 为3.0\n\nf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.r // 设 f 为1,0\nf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 f 为1.0\n")])])]),n("p",[t._v("如你所见,在这些例子中 x、r 和 s 虽然名称不同，但访问的却都是第1个分量。如果试图访问超过矢量长度的分量，就会出错:")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("f "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // v3 变量中不存在的第4个元素，w 无法访问\n")])])]),n("p",[t._v("将(同一个集合的)多个分量名共同置于点运算符后，就可以从矢量中同时抽取出多个分量。这个过程称作混合( swizzling)。在下面这个例子中，我们使用了 x、y、z 和 w，其他的集合也有相同的效果：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec2 v2\nv2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.xy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 v2 为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1,0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nv2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" V3.yz"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 v2 为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3,0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 可以省略任意分量\nv2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.xz"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 v2 为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 可以跳过任意分量\nv2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.yx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 v2 为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 可以逆序\nv2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.xx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 v2 为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 可以重复任意分量\n\nvec3 v3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv3a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3.zyx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设 v3a 为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 可以使用所有分量\n")])])]),n("p",[t._v("聚合分量名也可以用来作为赋值表达式 (=) 的左值:")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" position "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nposition.xw "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // position "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("记住，此时的多个分量名必须属于同一个集合，比如说，你不能使用 v3.was")])]),t._v(" "),n("h3",{attrs:{id:"运算符-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算符-3"}},[t._v("#")]),t._v(" [] 运算符")]),t._v(" "),n("p",[t._v("除了点运算符，可以通过 [] 运算符通过数组下标来访问矢量或矩阵的元素。矩阵中的元素仍然是可以按照列主序读取的。注意下标是从 0 开始的。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("mat4 m4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mat4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),t._v(",\n               "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.0")]),t._v(",\n               "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.0")]),t._v(",\n               "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("13.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("14.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("15.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec4 v4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 获取 m4 矩阵的第一列，即 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("13.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("p",[t._v("使用两个 []，获取某列的某个元素：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("float m23 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 获取 m4 矩阵的第 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" 列，第 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" 个元素，即 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("可以同时使用 [] 运算符和分量名来访问矩阵中的元素：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("float m23 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 获取 m4 矩阵的第 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" 列，第 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" 个元素，即 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("需要注意的是，[] 中的索引值必须是常量索引值，常量索引值定义如下：")]),t._v(" "),n("ul",[n("li",[t._v("整型字面量：0 或 1；")]),t._v(" "),n("li",[t._v("用 const 修饰的全局变量或局部变量，不包括函数参数；")]),t._v(" "),n("li",[t._v("循环索引；")]),t._v(" "),n("li",[t._v("由前述三条中的项组成的表达式；")])]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("const int index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" // const 关键字表示变量是只读的\nvec4 v4a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" // 同 m4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n// const 组成的表达式\nvec4 v4b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index + "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("h3",{attrs:{id:"运算符-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算符-4"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),n("p",[t._v("下表显示了矢量和矩阵所支持的运算。注意，对于矢量和矩阵，只可以使用比较运算符中的 == 和 != ，不可以使用 > 、<、>=、<=，可以使用内置函数，比如 lessThan() 来比较矢量和矩阵的大小。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(569),alt:"avatar"}})]),t._v(" "),n("p",[t._v("当运算赋值操作作用于矢量或矩阵时，实际上是逐分量地对矩阵或矢量的每一个元素进行独立的运算赋值。")]),t._v(" "),n("h3",{attrs:{id:"矩阵右乘矢量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#矩阵右乘矢量"}},[t._v("#")]),t._v(" 矩阵右乘矢量")]),t._v(" "),n("p",[t._v("矩阵右乘矢量的结果是矢量，其中每个分量都是原矢量中的对应分量，乘上矩阵对应行的每个元素的积的加和。这里要把矢量当做 3 行 1 列的矩阵，矩阵的 3 × 3 的矩阵乘以 3 × 1 的矩阵，就是 3 × 1 矢量。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("v3b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a * v3a \n// v3b.x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x * v3a.x + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x * v3a.y + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x * v3a.z\n// v3b.y "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y * v3a.x + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y * v3a.y + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y * v3a.z\n// v3b.z "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z * v3a.x + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z * v3a.y + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z * v3a.z\n")])])]),n("h3",{attrs:{id:"矩阵左乘矢量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#矩阵左乘矢量"}},[t._v("#")]),t._v(" 矩阵左乘矢量")]),t._v(" "),n("p",[t._v("矩阵左乘也是可以，但是结果与右乘不同，可以将矢量想象成 1 × 3 的矩阵，乘以 3 × 3 的矩阵，就是 1 × 3 的矢量。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("v3b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3a * m3a  \n// v3b.x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3a.x * m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x + v3a.y * m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y + v3a.z * m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z\n// v3b.y "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3a.x * m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x + v3a.y * m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y + v3a.z * m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z\n// v3b.z "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3a.x * m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x + v3a.y * m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y + v3a.z * m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z\n")])])]),n("h3",{attrs:{id:"矩阵与矩阵相乘"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#矩阵与矩阵相乘"}},[t._v("#")]),t._v(" 矩阵与矩阵相乘")]),t._v(" "),n("p",[t._v("就是线性代数中的矩阵相乘：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("m3c "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a * m3b  \n// m3c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z\n// m3c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z\n// m3c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z\n\n// m3c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z\n// m3c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z\n// m3c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z\n\n// m3c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z\n// m3c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z\n// m3c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".x + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".y + m3a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z * m3b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".z\n")])])]),n("h2",{attrs:{id:"结构体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[t._v("#")]),t._v(" 结构体")]),t._v(" "),n("p",[t._v("GLSL ES 支持用于自定义的类型，也就是结构体。使用关键字 struct，将已存在的类型聚合在一起，就可以定义为结构体：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("// 定义了结构体类型 light\nstruct light "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  vec4 color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  vec3 position"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n// 声明了 light 类型的变量 l1 和 l2\nlight l1, l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("此外，为了方便，可以在同一条语句中定义结构体并声明改结构体类型的变量，如下所示：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("// 定义了结构体类型 light\nstruct light "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  vec4 color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 光的颜色\n  vec3 position"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 光源位置\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 声明了 light 类型的变量 l1\n\n")])])]),n("h3",{attrs:{id:"赋值和构造-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#赋值和构造-2"}},[t._v("#")]),t._v(" 赋值和构造")]),t._v(" "),n("p",[t._v("结构体有标准的构造函数，与结构体名称一致，如前面定义的结构体函数，使用方法如下：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" light"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", vec3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v("\n")])])]),n("h3",{attrs:{id:"访问成员"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#访问成员"}},[t._v("#")]),t._v(" 访问成员")]),t._v(" "),n("p",[t._v("跟 JavaScript 对象访问属性是一样的。如下：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec4 color "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1.color\nvec3 position "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1.position\n")])])]),n("h3",{attrs:{id:"运算符-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算符-5"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),n("p",[t._v("结构体的成员可以参与其自身类型支持的任何运算，但是结构体本身只支持两种运算：赋值（=）和比较（== 和 !=）：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("运算符")]),t._v(" "),n("th",[t._v("运算")]),t._v(" "),n("th",[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("=")]),t._v(" "),n("td",[t._v("赋值")]),t._v(" "),n("td",[t._v("赋值和比较运算符不适用于含有数组与纹理成员的结构体")])]),t._v(" "),n("tr",[n("td",[t._v("==，!=")]),t._v(" "),n("td",[t._v("比较")]),t._v(" "),n("td",[t._v("赋值和比较运算符不适用于含有数组与纹理成员的结构体")])])])]),t._v(" "),n("p",[t._v("当且仅当两个结构体变量所对应的所有成员都相等时，== 运算符才会返回 true。")]),t._v(" "),n("h2",{attrs:{id:"数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),n("p",[t._v("GLSL ES 支持数组类型，并且只支持一维数组，没有与 JavaScript 一样有数组的一些操作方法；创建数组的方法也很简单，不需要 new 运算符。如下：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("float floatArray"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" // 声明含有 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" 个浮点数元素的数组\nvec4 vec4Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" // 声明含有 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" 个 vec4 对象的数组\n")])])]),n("p",[t._v("[] 里面是数组的长度，数组的长度必须是大于 0 的整型常量表达式。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("int size "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\nvec4 vec4Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" // 错误，如果第一行为 const int size "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("，则不会报错\n")])])]),n("p",[t._v("数组元素可以通过索引值来访问，索引值是从 0 开始的。只有整型常量表达式和 uniform 变量，可以被用作数组的索引值。数组不能在声明时被一次性地初始化，而必须显示地对每个元素进行初始化。如下：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("vec4Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nvec4Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("数组只支持 [] 运算，但数组的元素可以参与其自身类型支持的任意运算：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("// 将 floatArry 的第 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" 个元素乘以 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),t._v("\nfloat f "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" floatArray"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" * "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),t._v("\n")])])]),n("h2",{attrs:{id:"取样器-纹理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#取样器-纹理"}},[t._v("#")]),t._v(" 取样器（纹理）")]),t._v(" "),n("p",[t._v("GLSL ES 支持一种内置的类型：取样器；我们必须通过该类型变量访问纹理。有两种基本的取样器类型：sampler2D 和 samplerCube。取样器变量只能是 uniform 变量，或者需要访问纹理的函数，如 texture2D() 函数。比如：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("uniform sampler2D u_Sampler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("下表是纹理查询相关函数：\n"),n("img",{attrs:{src:a(570),alt:"avatar"}})]),t._v(" "),n("p",[t._v("此外，唯一能赋值给取样器变量的就是纹理单元编号，而且必须使用 WebGL 方法 gl.uniformli() 来进行赋值。比如我们前面在纹理的例子中，使用 gl.uniformli(u_Sample, 0) 将纹理单元编号 0 传给着色器。")]),t._v(" "),n("p",[t._v("除了 =、== 和 !=，取样器变量不可以作为操作数参与运算。")]),t._v(" "),n("p",[t._v("取样器类型变量受到着色器支持的纹理单元的最大数量限制，如下表，mediump 是一个精度限定字。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("着色器")]),t._v(" "),n("th",[t._v("表示最大数量的内置常量")]),t._v(" "),n("th",[t._v("最小数量")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("顶点着色去")]),t._v(" "),n("td",[t._v("const mediump int gl_MaxVertexTextureImageUnits")]),t._v(" "),n("td",[t._v("0")])]),t._v(" "),n("tr",[n("td",[t._v("片元着色器")]),t._v(" "),n("td",[t._v("const mediump int gl_MaxTextureImageUnits")]),t._v(" "),n("td",[t._v("8")])])])]),t._v(" "),n("h2",{attrs:{id:"运算符优先级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算符优先级"}},[t._v("#")]),t._v(" 运算符优先级")]),t._v(" "),n("p",[t._v("如下表：\n"),n("img",{attrs:{src:a(571),alt:"avatar"}})]),t._v(" "),n("h2",{attrs:{id:"程序流程控制-分支和循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#程序流程控制-分支和循环"}},[t._v("#")]),t._v(" 程序流程控制：分支和循环")]),t._v(" "),n("p",[t._v("着色器中的分支和循环跟 JavaScript 中的几乎一样。")]),t._v(" "),n("h3",{attrs:{id:"if-语句和-if-else-语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#if-语句和-if-else-语句"}},[t._v("#")]),t._v(" if 语句和 if-else 语句")]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("distance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  gl_FragColor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // 红色\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  gl_FragColor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // 绿色\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"for-语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for-语句"}},[t._v("#")]),t._v(" for 语句")]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("int i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i++"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("需要注意的是，循环变量，也就是上面的 i 只能在舒适化表达式中定义，也就是 for 的第一个参数。for 语句有下面一些限制：")]),t._v(" "),n("ul",[n("li",[t._v("只允许有一个循环变量，循环变量只能是 int 或 float 类型；")]),t._v(" "),n("li",[t._v("循环表达式必须是以下的形式：i++, i--, i+= 常量表达式或 i-= 常量表达式")]),t._v(" "),n("li",[t._v("条件表达式必须是循环变量与整型变量的比较；")]),t._v(" "),n("li",[t._v("在循环体内，循环变量 i 不可被赋值。")])]),t._v(" "),n("h3",{attrs:{id:"continue、break-和-discard-语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#continue、break-和-discard-语句"}},[t._v("#")]),t._v(" continue、break 和 discard 语句")]),t._v(" "),n("p",[t._v("只能在 for 语句中使用 continue 和 break，通常将他们与 if 语句搭配使用；")]),t._v(" "),n("ul",[n("li",[t._v("continue 终止包含该语句的最内层循环和执行循环表达式（递增 / 递减循环变量），然后执行下一次循环。")]),t._v(" "),n("li",[t._v("break 终止包含该语句的最内存循环，并不再继续执行循环。")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("for"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("int i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i ++"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("continue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 跳过循环体后面的代码，继续下次循环\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  // 当 i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" 时，不会执行这里\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("break 例子：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("for"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("int i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i ++"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 跳出 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" 循环\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  // 当 i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" 时，不会执行这里\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n// 当 i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" 时，执行这里\n")])])]),n("p",[t._v("discard 他只能在片元着色器中使用，表示放弃当前片元直接处理下一个片元。")]),t._v(" "),n("h2",{attrs:{id:"函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),n("p",[t._v("如果函数没有返回值，函数不需要有 return 语句，并且返回类型必须是 void。也可以将自己定义的结构体类型指定为返回类型，但是结构体的成员中不能有数组。")]),t._v(" "),n("p",[t._v("例子：实现将 RGBA 颜色值转换为亮度值")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("float luma"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vec4 color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  float r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color.r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  float g "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color.g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  float b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color.b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2126")]),t._v(" * r + "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.7126")]),t._v(" * g + "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0722")]),t._v(" * b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nattribute vec4 a_Color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvoid "),n("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  float brightness "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" luma"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a_Color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("不能递归调用。")]),t._v(" "),n("h3",{attrs:{id:"规范声明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#规范声明"}},[t._v("#")]),t._v(" 规范声明")]),t._v(" "),n("p",[t._v("如果函数定义在其调用之后，需要先声明函数的规范，会犯声明会预先告诉 webgl 系统函数的参数、参数类型、返回值等等。如下：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("float luma"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vec4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // 规范声明\nattribute vec4 a_Color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvoid "),n("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  float brightness "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" luma"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a_Color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // 在定义之前就被调用了\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nfloat luma"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vec4 color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  float r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color.r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  float g "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color.g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  float b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color.b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2126")]),t._v(" * r + "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.7126")]),t._v(" * g + "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0722")]),t._v(" * b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"参数限定词"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参数限定词"}},[t._v("#")]),t._v(" 参数限定词")]),t._v(" "),n("p",[t._v("在 GLSL ES 中，可以为函数参数指定限定词，以控制参数的行为。可以将函数参数定义为：(1) 传递给函数的，(2) 将要在函数中被赋值的，(3) 既是传递给函数的，也是将要在函数中被赋值的。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(572),alt:"avatar"}})]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("void luma"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("in vec3 color, out float brightness"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  brightness "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2126")]),t._v(" * color.r\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n// 调用函数\nluma"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("color, brightness"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // 函数结果存储在 brightness 中\n// 和 brightness "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" luma"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 效果一样\n")])])]),n("p",[t._v("修改之后，函数本身不返回值，所以函数的返回类型设置为 void，in 限定词是参数默认的限定词，可以省略。")]),t._v(" "),n("h2",{attrs:{id:"内置函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内置函数"}},[t._v("#")]),t._v(" 内置函数")]),t._v(" "),n("p",[t._v("如下表：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(573),alt:"avatar"}})]),t._v(" "),n("p",[t._v("函数中定义的变量只能在函数中使用，为局部变量，在函数外定义的变量就是全局变量。")]),t._v(" "),n("h2",{attrs:{id:"存储限定字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#存储限定字"}},[t._v("#")]),t._v(" 存储限定字")]),t._v(" "),n("p",[t._v("使用 attribute、varying 和 uniform 限定字来修改变量，")]),t._v(" "),n("p",[n("img",{attrs:{src:a(574),alt:"avatar"}}),t._v(" "),n("img",{attrs:{src:a(575),alt:"avatar"}})]),t._v(" "),n("h3",{attrs:{id:"const-变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#const-变量"}},[t._v("#")]),t._v(" const 变量")]),t._v(" "),n("p",[t._v("在声明 const 变量时，需要将 const 写在类型之前，声明同时必须对它进行初始化，声明之后就不能修改他的值。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("const int lightspeed "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("233343")]),t._v("\n")])])]),n("h3",{attrs:{id:"attribute-变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attribute-变量"}},[t._v("#")]),t._v(" Attribute 变量")]),t._v(" "),n("p",[t._v("attribute 变量只能出现在顶点着色器中，只能被声明为全局变量，被用来表示逐顶点的信息。表示逐顶点的含义是，比如线段有两个顶点，这两个坐标就会传递给 attribute 变量。而线段上的其他点，比如中点，虽然也被绘制出来了，但他不是顶点，并没有传递给 attribute 变量。")]),t._v(" "),n("p",[t._v("attribute 变量的类型只能是 float、vec2、vec3、vec4、mat2、mat3 和 mat4，如下：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("attribute vec4 a_Color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nattribute float a_PointSize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("顶点着色器中能够容纳的 attribute 变量的最大数目与设备有关，可以通过访问内置的全局变量来获取该值，但是，不管设置配置如何，支持 webgl 的环境都支持至少 8 个 attribute 变量。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("变量类别")]),t._v(" "),n("th",[t._v("内置全局变量（表示最大数量）")]),t._v(" "),n("th",[t._v("最小值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("attribute 变量")]),t._v(" "),n("td",[t._v("const mediump int gl_MaxVertexAttribs")]),t._v(" "),n("td",[t._v("8")])]),t._v(" "),n("tr",[n("td",[t._v("uniform 变量（顶点着色器）")]),t._v(" "),n("td",[t._v("const mediump int gl_MaxVertexUniformVectors")]),t._v(" "),n("td",[t._v("128")])]),t._v(" "),n("tr",[n("td",[t._v("uniform 变量（片元着色器）")]),t._v(" "),n("td",[t._v("const mediump int gl_MaxFragmentUniformVectors")]),t._v(" "),n("td",[t._v("16")])]),t._v(" "),n("tr",[n("td",[t._v("varying 变量")]),t._v(" "),n("td",[t._v("const mediump int gl_MaxVaryingVectors")]),t._v(" "),n("td",[t._v("8")])])])]),t._v(" "),n("h3",{attrs:{id:"uniform-变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uniform-变量"}},[t._v("#")]),t._v(" uniform 变量")]),t._v(" "),n("p",[t._v("uniform 变量可以用在顶点着色器和片元着色器中，且必须是全局变量。uniform 变量是只读的，他可以是除了数组或结构体之外的任意类型。如果顶点着色器和片元着色器中声明了同名的 uniform 变量，那么它就会被两种着色器共享。uniform 包含了一致的数据，JavaScript 应该向其传递此类数据。比如变换矩阵就不是逐顶点的，而是所有顶点共用的，所以在着色器中是 uniform 变量。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("uniform mat4 u_ViewMatrix"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"varying-变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#varying-变量"}},[t._v("#")]),t._v(" varying 变量")]),t._v(" "),n("p",[t._v("varying 变量必须是全局变量，他的任务是从顶点着色器向片元着色器传输数据。两种着色器必须声明同名、同类型的 varying 变量。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("varying vec2 v_TexCoord"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("varying 变量的类型只能是 float、vec2、vec3、vec4、mat2、mat3 和 mat4；顶点着色器中赋给 varying 变量的值并不是直接传给了片元着色器的 varying 变量，这其中发生了光栅化的过程：根据绘制的图形，对前者（顶点着色器 varying 变量）进行内插，然后再传递给片元着色器的 varying 变量，这是因为 varying 变量需要被内插。所以需要限制他的数据类型。")]),t._v(" "),n("h2",{attrs:{id:"精度限定字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#精度限定字"}},[t._v("#")]),t._v(" 精度限定字")]),t._v(" "),n("p",[t._v("精度限定字目的是帮助着色器程序调高运行效率，消减内存开支。精度限定字用来表示每种数据具有的精度。简而言之，高精度的程序需要更大的开销（包括更大的内存和更久的计算时间），而低精度的程序需要的开销则小的多。使用精度限定字，能够精细地控制程序在效果和性能间的平衡。精度限定字是可选的，可以使用下面这个适中的默认值：")]),t._v(" "),n("p",[t._v("精度限定 : 片元着色器中 float 没有默认精度，所以需要手动提前指定；")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#ifdef GL_ES")]),t._v("\nprecision mediump float"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#endif")]),t._v("\n")])])]),n("p",[t._v("在低精度下，webgl 程序的运行结果会比较粗糙或不明确。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(576),alt:"avatar"}})]),t._v(" "),n("p",[t._v("在某些 webgl 环境中，片元着色器可能不支持 highp 精度，数值范围和精度实际上也是与系统环境相关的，可以使用 gl.getShaderPrecisionFormat() 检查。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("mediump float sizel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 中精度的浮点型变量\nhighp vec4 position"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 具有高精度的浮点型元素 vec4 变量\nlowp vec4 color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 具有低精度的浮点型元素 vec4 变量\n")])])]),n("p",[t._v("为每个变量都声明精度很繁琐，可以使用关键字 precision 来声明着色器的默认精度，下面这行代码必须在顶点着色器或片元着色器的顶部：")]),t._v(" "),n("p",[t._v("格式如下：precision 精度限定字 类型名称;")]),t._v(" "),n("p",[t._v("这句代码表示，在着色器中，某种类型的变量其默认精度由精度限定字指定。也就是说，接下来不以精度限定字修饰的该类型变量，其精度就是默认精度。比如：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("precision mediump float"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 所有浮点数默认为中精度\nprecision highp int"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 所有整型数默认为高精度\n")])])]),n("p",[t._v("上面代码表示，所有 float 类型以及相关的 vec2 和 mat3 的变量都是中精度，所有整型变量都是高精度的。")]),t._v(" "),n("p",[t._v("对于大部分的类型，着色器已经实现了默认的精度，只有片元着色器中的 float 类型没有默认精度，如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(577),alt:"avatar"}})]),t._v(" "),n("p",[t._v("如果不在片元着色器中限定 float 类型的精度，就会导致编译错误。")]),t._v(" "),n("h2",{attrs:{id:"预处理指令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#预处理指令"}},[t._v("#")]),t._v(" 预处理指令")]),t._v(" "),n("p",[t._v("GLSL ES 支持预处理指令，预处理指令用来在真正编译之前对代码进行预处理，都以 # 开始，如下：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ifdef GL_ES")]),t._v("\nprecision mediump float"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#endif")]),t._v("\n")])])]),n("p",[t._v("这段代码检查了是否已经定义了 GL_ES 宏，如果是，那就执行 #ifdef 和 #endif 之间的部分。")]),t._v(" "),n("p",[t._v("下面是我们在 GLSL ES 中可能用到的三种预处理指令：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#if 表达式")]),t._v("\nIf 如果条件表达式为真，执行这里\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#endif")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#ifdef 自定义宏")]),t._v("\n如果定义了宏，执行这里\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#endif")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#ifndef 自定义宏")]),t._v("\n如果定义了宏，执行这里\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#endif")]),t._v("\n")])])]),n("p",[t._v("可以使用 #define 指定进行宏定义。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#define 宏名 宏内容")]),t._v("\n")])])]),n("p",[t._v("可以使用 #undef 指令解除宏定义")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#undef 宏名")]),t._v("\n")])])]),n("p",[t._v("可以使用 #else 指令配合 #ifdef，")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#define NUM 100")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#if NUM == 100")]),t._v("\n如果宏 NUM 为 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("，执行这里\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#else")]),t._v("\n否则，执行这里\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#endif")]),t._v("\n")])])]),n("p",[t._v("宏的名称可以任意起，不过不要和预定的内置宏名称相同即可：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("宏")]),t._v(" "),n("th",[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("GL_ES")]),t._v(" "),n("td",[t._v("在 opengl es 2.0 中定义为 1")])]),t._v(" "),n("tr",[n("td",[t._v("GL_FRAGMENT_PRECISION_HIGH")]),t._v(" "),n("td",[t._v("片元着色器支持 highp 精度")])])])]),t._v(" "),n("p",[t._v("可以这样使用宏来进行精度限定：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#ifdef GL_ES")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#ifdef GL_FRAGMENT_PRECISION_HIGH")]),t._v("\nprecision highp float"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 支持高精度，限定浮点型为高精度\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#else")]),t._v("\nprecision mediump float"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 不支持高精度，限定浮点数为中精度\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#endif")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#endif")]),t._v("\n")])])]),n("p",[t._v("可以使用 #version 来指定着色器使用的 GLSL ES 版本，可以接受的版本包括 100（GLSL ES 1.00）和 101（GL_SL ES 1.01），如果不使用 #version 指令，着色器将默认 版本为 1.00，指定 1.01 版本的代码如下：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#version 101")]),t._v("\n")])])]),n("p",[t._v("#version 指令必须在着色器的顶部，在他之前只能有注释和空白。")]),t._v(" "),n("Valine")],1)}),[],!1,null,null,null);s.default=e.exports}}]);