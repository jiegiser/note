(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{795:function(t,e,r){"use strict";r.r(e);var a=r(29),v=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("已下通过从数据绑定、组件化和数据流、数据状态管理、渲染和更新等方面进行对比两个框架；")]),t._v(" "),r("h2",{attrs:{id:"数据绑定"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据绑定"}},[t._v("#")]),t._v(" 数据绑定")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("vue 在数据绑定上采取双向绑定。依靠 Object.defineProperty(vue3 已迁移到 Proxy) 及监听 DOM 事件实现。简单来说就是，为了监听数据变化，我们需要对数据进行拦截/代理；对于监听视图的改变，我们需要对 DOM 事件（如 onInput、onChange 等）进行监听。")])]),t._v(" "),r("li",[r("p",[t._v("react 中并没有数据和视图之间的双向绑定，他的策略是 “局部刷新”，当数据发生变化时，直接重新渲染组件，便可以得到最新的视图。框架对这种刷新在性能上提供了一定的保障。")])])]),t._v(" "),r("p",[t._v("这里需要区分的是双向绑定和单项数据流并没有直接关系，双向绑定是指数据和视图之间的绑定关系，而单项数据流是指组件之间的数据传递。")]),t._v(" "),r("h2",{attrs:{id:"组件化和数据流"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#组件化和数据流"}},[t._v("#")]),t._v(" 组件化和数据流")]),t._v(" "),r("p",[t._v("vue 组件 不像 react 组件，他不是完全以组件功能和 UI 为维度进行划分的，vue 组件本质上是一个 vue 实例。每个 vue 实例在创建时都需要经过以下几个步骤：设置数据监听、编译模板。将模板应用到 DOM 上，而且要在更新时根据数据变化更新 DOM\n的过程。在这个过程，vue 也像 react 一样提供了类似组件的声明周期的方法。")]),t._v(" "),r("p",[t._v("vue 组件之间的通信，或者说组件间数据流，同 react 一样，也是单向的。他们在数据流向上也很类似，即通过 props 实现父组件向下传递数据，vue 基于 events 实现子组件向上发送消息给父组件，react 基于 props 的回调来实现子组件向父组件传递数据。vue 也支持回调的方式传递数据。")]),t._v(" "),r("h2",{attrs:{id:"数据状态管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据状态管理"}},[t._v("#")]),t._v(" 数据状态管理")])])}),[],!1,null,null,null);e.default=v.exports}}]);