(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{752:function(t,s,a){"use strict";a.r(s);var n=a(26),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"响应式布局适配方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应式布局适配方案"}},[t._v("#")]),t._v(" 响应式布局适配方案")]),t._v(" "),a("p",[t._v("响应式布局的几种典型方案，具体如下：")]),t._v(" "),a("ul",[a("li",[t._v("传统布局")]),t._v(" "),a("li",[t._v("相当单位布局")]),t._v(" "),a("li",[t._v("通过媒体查询实现的响应式布局")]),t._v(" "),a("li",[t._v("基于相对单位 rem 的 flexible 布局")]),t._v(" "),a("li",[t._v("flex 布局")]),t._v(" "),a("li",[t._v("grid 布局")]),t._v(" "),a("li",[t._v("借助 JavaScript 进行布局")])]),t._v(" "),a("p",[t._v("传统布局也就是多栏自适应布局，这种实现方式比较传统，且实现方式比较复杂。同时对整体布局侵入影响较大。除了传统布局，我们还会经常用到相对单位布局，这种实现方式比较容易，下面是 CSS 中相对单位：")]),t._v(" "),a("ul",[a("li",[t._v("em：相对于当前元素或当前元素继承来的字体的宽度，但是每个字母或汉字的宽度有可能是不一样的，一般来说是一个大写字母 M 的宽度（事实上，规范中有一个 x-height 概念，建议取 X 的高度，但并没有推荐绝对的计算执行标准，还需要看浏览器的实现，也有的地方采用 O 的高度）；一个非常容易出错的点在于，em 并不全是相对于父元素的字体大小，相对于谁取决于应用在什么 CSS 属性上。对于 font-size 来说，em 是相对于父元素的字体大小；在 line-height 中，em 却是相对于自身的字体大小。")]),t._v(" "),a("li",[t._v("rem：相对于根节点（html）的字体大小")])]),t._v(" "),a("p",[t._v("上面这两个单位在响应式布局中非常重要，淘宝的 flexible 布局方案就是以 rem 为核心的。")]),t._v(" "),a("ul",[a("li",[t._v("vw：相对于视口宽度，100vw 就相当于一个视口宽度。")]),t._v(" "),a("li",[t._v("vh：同 vw，1vh 表示一个视口高度的 1/100，100vh 就是一个视口高度。")]),t._v(" "),a("li",[t._v("vmin、vmax：vmin 相对于视口的宽度或高度中较小的那个，也就是在 1vw 和 1vh 之间取最小值（Math.min(1vw, 1vh)）;vaxm 就是取最大值。")]),t._v(" "),a("li",[t._v("%")]),t._v(" "),a("li",[t._v("calc()：是一个响应式布局计算单位，他使得 CSS 有了运算的能力。")])]),t._v(" "),a("h3",{attrs:{id:"线上适配案例分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线上适配案例分析"}},[t._v("#")]),t._v(" 线上适配案例分析")]),t._v(" "),a("p",[t._v("这里主要分析移动端适配，首先需要禁止用户缩放功能，使页面宽度和设备宽度对齐，添加下面代码：")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no, viewport-fix=cover"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("然后实现响应式布局，有不同的方法，淘宝的 flex 布局，根据 JavaScript 计算 font-size 然后设置 rem 单位，网易等使用媒体查询以及 calc 来计算；")]),t._v(" "),a("h3",{attrs:{id:"bootstrap-栅格实现思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bootstrap-栅格实现思路"}},[t._v("#")]),t._v(" Bootstrap 栅格实现思路")]),t._v(" "),a("p",[t._v("先看 col-6 实现代码：")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".col-6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("-webkit-box-flex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("-webkit-flex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0 0 50%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("-ms-flex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0 0 50%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("flex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0 0 50%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("max-width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 50%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("首先 flex 属性是由 flex-grow、flex-shrink、flex-basis 的简写。")]),t._v(" "),a("ul",[a("li",[t._v("flex-grow：该属性定义项目的放大比例，默认值为 0, Bootstrap 设置为 0 ，也就是说如果存在剩余空间，也不放大；")]),t._v(" "),a("li",[t._v("flex-shrink：该属性定义了项目的缩小比例，默认值为 1，即如果空间不足，该项目将缩小。")]),t._v(" "),a("li",[t._v("flex-basis：该属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器会根据这个属性计算主轴是否有多余空间，该属性可以设置与 width 或 height 属性一样的值，此时项目将占据固定空间。")])]),t._v(" "),a("p",[t._v("然后 Bootstrap 通过设置媒体查询来实现响应式布局。Bootstrap 主要通过百分比宽度、flex 属性及媒体查询来实现栅格化布局的主题。")]),t._v(" "),a("h3",{attrs:{id:"横屏适配及其他细节问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#横屏适配及其他细节问题"}},[t._v("#")]),t._v(" 横屏适配及其他细节问题")]),t._v(" "),a("p",[t._v("我们一般使用 JavaScript 检查横屏和竖屏情况：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'resize'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("orientation "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("180")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("orientation "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'竖屏'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("orientation "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("orientation "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'横屏'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("同时，可以使用纯 CSS 来实现不同场景下的布局：")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token atrule"}},[a("span",{pre:!0,attrs:{class:"token rule"}},[t._v("@media")]),t._v(" screen "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("orientation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" portrait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 竖屏样式代码 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token atrule"}},[a("span",{pre:!0,attrs:{class:"token rule"}},[t._v("@media")]),t._v(" screen "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("orientation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" landscape"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 横屏样式代码 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("其他响应式布局常见问题：1px 问题、适配 iPhoneX 齐刘海、图片自适应等。")]),t._v(" "),a("h3",{attrs:{id:"相对于谁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相对于谁"}},[t._v("#")]),t._v(" % 相对于谁")]),t._v(" "),a("p",[t._v("前面有实现水平垂直居中的几种方法，其中 absolute + transform 方案对应的代码如下：")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".wp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("position")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" relative"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".box")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("position")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" absolute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 50%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 50%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("transform")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("translate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-50%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" -50%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面代码中的 % 代表着不一样的计算规则。top 和 left 对应的 50% 分别是指 .wp 相对定位元素宽度和高度的 50%，而 transform 中的 50% 分别是指自身元素宽度和高度的 50%；")]),t._v(" "),a("p",[t._v("CSS 中 % 的规则如下：")]),t._v(" "),a("ul",[a("li",[t._v("position：absolute 中的 %")])]),t._v(" "),a("p",[t._v("对于设置绝对定位的元素，我们可以使用 left、top 表示其偏移量，我们把这个元素的祖先元素中第一个存在定位属性的元素当做参照物，其中的 % 是相对于参照物的，left 相对于参照物的 width，top 相对于参照物的 height；")]),t._v(" "),a("ul",[a("li",[t._v("position：relative 中的 %")])]),t._v(" "),a("p",[t._v("对于设置相对定位的元素，% 的数值是相对于自身的，left 相对于自身的 width，top 相对于自身的 height。")]),t._v(" "),a("ul",[a("li",[t._v("position：fixed 中的 %")])]),t._v(" "),a("p",[t._v("对于设置固定定位的元素，% 的数值是相对于视口的，left 相对于视口的 width，top 相对于视口的 height。")]),t._v(" "),a("ul",[a("li",[t._v("margin 和 padding 中的 %")])]),t._v(" "),a("p",[t._v("margin 和 padding 中的 % 非常特殊，他是相对于父元素的宽度的。没错，margin-top: 30px 相当于父元素宽度的 30%；")]),t._v(" "),a("ul",[a("li",[t._v("border-radius 中的 %")])]),t._v(" "),a("p",[t._v("相对于自身的宽高；")]),t._v(" "),a("ul",[a("li",[t._v("background-size 中的 %")])]),t._v(" "),a("p",[t._v("相对于自身的宽高；")]),t._v(" "),a("ul",[a("li",[t._v("transform translate 中的 %")])]),t._v(" "),a("p",[t._v("相对于自身的宽高；")]),t._v(" "),a("ul",[a("li",[t._v("text-indent 中的 %")])]),t._v(" "),a("p",[t._v("用来设置首行缩进，% 相对于父元素的 width 的。")]),t._v(" "),a("ul",[a("li",[t._v("font-size 中的 %")])]),t._v(" "),a("p",[t._v("当前元素的字体大小用 % 设置时，会相对于父元素的字体大小进行换算。")]),t._v(" "),a("ul",[a("li",[t._v("line-height 中的 %")])]),t._v(" "),a("p",[t._v("相对于该元素的 font-size 数值的")]),t._v(" "),a("h3",{attrs:{id:"深入-flex-布局和传统布局的性能对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深入-flex-布局和传统布局的性能对比"}},[t._v("#")]),t._v(" 深入：flex 布局和传统布局的性能对比")]),t._v(" "),a("p",[t._v("首先性能问题一定是一个相对概念，flex 布局与正常的 block layout（no-float）相比，性能开销一定更大。事实上，block layout 永远都是通过单通道算法（single-pass）进行布局的，而 flex 布局缺总会触发多通道算法（multi-pass code path）进行布局。单通道以及多通道属于图形学算法问题。")]),t._v(" "),a("p",[t._v("布局性能的开销一般与一下因素有关：")]),t._v(" "),a("ul",[a("li",[t._v("需要布局的元素数量")]),t._v(" "),a("li",[t._v("布局的复杂性")])]),t._v(" "),a("p",[t._v("相应的，在提高布局性能方面主要需要注意下面两点：")]),t._v(" "),a("ul",[a("li",[t._v("应尽可能避免触发布局（layout、reflow）")]),t._v(" "),a("li",[t._v("避免强制同步布局和布局抖动。")])]),t._v(" "),a("Valine")],1)}),[],!1,null,null,null);s.default=e.exports}}]);